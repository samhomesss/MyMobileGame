AddressAble -> 패치 시스템을 만든다고 생각하는 것이 편하다.
Spine 방식의 애니메이션 사용 -> 구글 spine을 이용하는게 좋다. https://ko.esotericsoftware.com/spine-unity-download
Data 저장 방식 사용을 위한 Json 파일 -> com.unity.nuget.newtonsoft-json 을 이용한 설치 
게임에 필요한 리소스를 다 로드하고 메모리에 로드하고 꺼내 쓰는 형태가 이상적인 형태다 

통상적으로 유니티에서 다른 오브젝트를 관리하는 옛날 방식은 Resources 라는 폴더를 만들어서 사용하는 것이지만 
현재는 Addressable을 이용해서 오브젝트를 관리 하는 것이 더 좋다.

배포를 한다는 것?
-> 모든 파일이 하나의 압축파일로 묶여서 배포가 되는 것 -> 옛날 방식으로는 압축 파일에 대한 심사를 계속해서 받아야 하는데 
현재는 Addressable을 통한 번들 시스템으로 다운을 받을 수 있다.

Spine의 경우 원래 Animation의 경우에 Sprite를 다 이어서 Animation을 실행시키는데 해당 방식이 아닌 
조금더 편하고 간단한 방법으로 Animation을 만드는 방식을 의미한다. -> 3D와 유사하게 뼈대를 오브젝트에 넣어주고 해당 오브젝트의 뼈대를 이용해서 
작업하는 방식을 말한다.

Addressable 에서 Profile의 BuildPath 와 LoadPath에 대한 지식 
우리가 관리하고 있는 에셋들이 지금 그룹핑이 되어 있는 상태인데 그룹별로 파일들이 압축 되서 나간다고 생각하면 됨 

이제 해당 경로를 통해서 해당 데이터가 어디에 저장 되는지 알 수 있는데 해당 경로를 지정한 상태로 Build버튼을 눌러서 확인 해보면 
Addressable Report를 통해서 데이터를 쓸수 있다.

해당 데이터는 값이 바뀔때만 갱신된다. (헤쉬값 기반으로 관리됨)

가장 큰 차이는 내가 보여주고 싶은 것들만 보여준다는 것도 있지만 사소한 데이터 정보가 바뀌었을때 해당 패치 시스템을 이용해서 패치가 가능하다는 
유연한 장점이 생긴다.